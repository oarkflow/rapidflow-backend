name: "Advanced Golang Server App Pipeline"
language: "golang"
version: "1.25"
branch: "main"
folder: "./testdata/my-go-app"
expose_ports: true
env:
  GOOS: "linux"
  GOARCH: "amd64"
  PORT: "3000"
  DATABASE_URL: "sqlite://db.sqlite"
steps:
  - type: "bash"
    content: |
      apt-get update && apt-get install -y wget curl git build-essential
      echo "Tools installed"
    files:
      config.json: |
        {
          "port": 3000,
          "database": "sqlite://db.sqlite"
        }
  - type: "bash"
    content: |
      cd /workspace
      ls -la
  - type: "bash"
    content: |
      cd /workspace
      go mod download
      go build -o server .
      chmod +x server
      ls -la server
      echo "Build completed"
  - type: "bash"
    content: |
      cd /workspace
      ./server > /tmp/server.log 2>&1 &
      SERVER_PID=$!
      sleep 3
      curl http://localhost:3000/health && echo "Health check passed" || echo "Health check failed"
      kill $SERVER_PID 2>/dev/null || echo "Server already stopped"
      wait $SERVER_PID 2>/dev/null || echo "Server process cleaned up"
      echo "Server logs:"
      cat /tmp/server.log

# Runnable definitions - how to package and deploy the built application
runnables:
  # Docker Container - Run the app as a container
  - name: "production-container"
    type: "docker_container"
    enabled: true
    container_name: "my-go-server-prod"
    image_name: "my-go-server:latest"
    entrypoint: ["/workspace/server"]
    working_dir: "/workspace"
    ports: ["8080:3000"] # Docker-style port mapping: host:container
    environment:
      ENV: "production"
      DATABASE_URL: "sqlite:///data/prod.db"
    config:
      restart_policy: "always"
    outputs:
      - type: "local"
        config:
          path: "./testdata/data/container-info.json"
