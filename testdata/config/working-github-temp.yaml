name: "Simple Working GitHub Temporary Server"
repo_url: "https://github.com/gin-gonic/examples.git"
branch: "master"
folder: "basic" # Use the basic example that we know works
temporary: true # Will stay running until manually stopped
expose_ports: true
env:
  GOOS: "linux"
  GOARCH: "amd64"
  PORT: "8080"

steps:
  - type: "bash"
    content: |
      cd /workspace
      echo "=== Building Gin Basic Example ==="
      ls -la
      cat main.go | head -20

  - type: "bash"
    content: |
      cd /workspace
      # Create a simple module for the basic example
      echo 'module gin-basic

      go 1.19

      require github.com/gin-gonic/gin v1.9.1

      require (
          github.com/bytedance/sonic v1.9.1 // indirect
          github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect
          github.com/gabriel-vasile/mimetype v1.4.2 // indirect
          github.com/gin-contrib/sse v0.1.0 // indirect
          github.com/go-playground/locales v0.14.1 // indirect
          github.com/go-playground/universal-translator v0.18.1 // indirect
          github.com/go-playground/validator/v10 v10.14.0 // indirect
          github.com/goccy/go-json v0.10.2 // indirect
          github.com/json-iterator/go v1.1.12 // indirect
          github.com/klauspost/cpuid/v2 v2.2.4 // indirect
          github.com/leodido/go-urn v1.2.4 // indirect
          github.com/mattn/go-isatty v0.0.19 // indirect
          github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
          github.com/modern-go/reflect2 v1.0.2 // indirect
          github.com/pelletier/go-toml/v2 v2.0.8 // indirect
          github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
          github.com/ugorji/go/codec v1.2.11 // indirect
          golang.org/x/arch v0.3.0 // indirect
          golang.org/x/crypto v0.9.0 // indirect
          golang.org/x/net v0.10.0 // indirect
          golang.org/x/sys v0.8.0 // indirect
          golang.org/x/text v0.9.0 // indirect
          google.golang.org/protobuf v1.30.0 // indirect
          gopkg.in/yaml.v3 v3.0.1 // indirect
      )' > go.mod
      go build -o gin-server .
      chmod +x gin-server
      ls -la gin-server
      echo "Build completed successfully"

  - type: "bash"
    content: |
      cd /workspace
      echo "Testing server..."
      ./gin-server > /tmp/server.log 2>&1 &
      SERVER_PID=$!
      sleep 3
      curl http://localhost:8080/ping && echo " - Server works!"
      kill $SERVER_PID 2>/dev/null
      wait $SERVER_PID 2>/dev/null || echo "Test completed"

# Container that stays running for user access
runnables:
  - name: "gin-temp-server"
    type: "docker_container"
    enabled: true
    container_name: "gin-temp-running"
    image_name: "gin-temp:running"
    entrypoint: ["/workspace/gin-server"]
    working_dir: "/workspace"
    ports: ["8096:8080"] # Users can access via http://localhost:8096
    environment:
      ENV: "development"
      GIN_MODE: "debug"
    outputs:
      - type: "local"
        config:
          path: "./testdata/data/gin-temp-running.json"
