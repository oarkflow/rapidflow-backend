name: "Advanced Golang Server App Pipeline"
language: "golang"
version: "1.25"
branch: "main"
folder: "./testdata/my-go-app"
expose_ports: true
env:
  GOOS: "linux"
  GOARCH: "amd64"
  PORT: "3000"
  DATABASE_URL: "sqlite://db.sqlite"
steps:
  - type: "bash"
    content: |
      apt-get update && apt-get install -y wget curl git build-essential
      echo "Tools installed"
    files:
      config.json: |
        {
          "port": 3000,
          "database": "sqlite://db.sqlite"
        }
  - type: "bash"
    content: |
      cd /workspace
      ls -la
  - type: "bash"
    content: |
      cd /workspace
      go mod download
      go build -o server .
      echo "Build completed"
  - type: "bash"
    content: |
      cd /workspace
      ./server > /tmp/server.log 2>&1 &
      SERVER_PID=$!
      sleep 3
      curl http://localhost:3000/health && echo "Health check passed" || echo "Health check failed"
      kill $SERVER_PID
      echo "Server logs:"
      cat /tmp/server.log

# Runnable definitions - how to package and deploy the built application
runnables:
  # Docker Container - Run the app as a container
  - name: "production-container"
    type: "docker_container"
    enabled: true
    entrypoint: ["/workspace/server"]
    ports: [3000]
    environment:
      ENV: "production"
      DATABASE_URL: "sqlite:///data/prod.db"
    config:
      restart_policy: "always"
    outputs:
      - type: "local"
        config:
          path: "/tmp/container-info.json"

  # Docker Image Export - Save image as tar for distribution
  - name: "docker-image"
    type: "docker_image"
    enabled: true
    config:
      tag: "my-go-app:latest"
    outputs:
      - type: "s3"
        config:
          bucket: "my-deployment-bucket"
          key: "docker-images/my-go-app-latest.tar"
          region: "us-west-2"
          access_key_id: "${AWS_ACCESS_KEY}"
          secret_access_key: "${AWS_SECRET_KEY}"
      - type: "local"
        config:
          path: "/tmp/my-go-app-image.tar"

  # Artifacts - Package source and binaries as zip
  - name: "source-artifacts"
    type: "artifacts"
    enabled: true
    config:
      include: ["server", "*.json", "README.md"]
      exclude: ["*.log", ".git"]
    outputs:
      - type: "s3"
        config:
          bucket: "my-artifacts-bucket"
          key: "releases/my-go-app-v1.0.0.zip"
          region: "us-west-2"
          access_key_id: "${AWS_ACCESS_KEY}"
          secret_access_key: "${AWS_SECRET_KEY}"
      - type: "email"
        config:
          to: ["team@company.com", "ops@company.com"]
          subject: "New Build Artifacts Ready"
          body: "The latest build artifacts are attached."
      - type: "webhook"
        config:
          url: "https://api.company.com/deployments/notify"
          method: "POST"
          headers:
            Authorization: "Bearer ${API_TOKEN}"
            Content-Type: "application/octet-stream"

  # Serverless Package - Prepare for AWS Lambda deployment
  - name: "serverless-package"
    type: "serverless"
    enabled: false # Disabled for this example
    config:
      runtime: "go1.x"
      handler: "main"
    outputs:
      - type: "s3"
        config:
          bucket: "lambda-deployments"
          key: "functions/my-go-app.zip"
          region: "us-west-2"
          access_key_id: "${AWS_ACCESS_KEY}"
          secret_access_key: "${AWS_SECRET_KEY}"
      - type: "webhook"
        config:
          url: "https://api.company.com/lambda/deploy"
          method: "POST"
          headers:
            Authorization: "Bearer ${LAMBDA_TOKEN}"
